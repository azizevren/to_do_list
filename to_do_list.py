import os
import json
from datetime import datetime

class TodoApp:
    def __init__(self):
        self.tasks = []
        self.filename = "tasks.json"
        self.load_tasks()
    
    def load_tasks(self):
        """GÃ¶revleri JSON dosyasÄ±ndan yÃ¼kler"""
        if os.path.exists(self.filename):
            try:
                with open(self.filename, 'r', encoding='utf-8') as file:
                    self.tasks = json.load(file)
                print("GÃ¶revler baÅŸarÄ±yla yÃ¼klendi.")
            except Exception as e:
                print(f"GÃ¶revler yÃ¼klenirken hata oluÅŸtu: {e}")
                self.tasks = []
        else:
            print("GÃ¶rev dosyasÄ± bulunamadÄ±. Yeni bir dosya oluÅŸturulacak.")
            self.tasks = []
    
    def save_tasks(self):
        """GÃ¶revleri JSON dosyasÄ±na kaydeder"""
        try:
            with open(self.filename, 'w', encoding='utf-8') as file:
                json.dump(self.tasks, file, ensure_ascii=False, indent=4)
            print("GÃ¶revler baÅŸarÄ±yla kaydedildi.")
        except Exception as e:
            print(f"GÃ¶revler kaydedilirken hata oluÅŸtu: {e}")
    
    def add_task(self):
        """Yeni gÃ¶rev ekler"""
        title = input("GÃ¶rev baÅŸlÄ±ÄŸÄ±: ")
        description = input("GÃ¶rev aÃ§Ä±klamasÄ±: ")
        
        # Tarih giriÅŸi ve doÄŸrulama
        while True:
            due_date_str = input("Son tarih (GG.AA.YYYY): ")
            if due_date_str.strip() == "":
                due_date = ""
                break
            
            try:
                due_date = datetime.strptime(due_date_str, "%d.%m.%Y").strftime("%d.%m.%Y")
                break
            except ValueError:
                print("GeÃ§ersiz tarih formatÄ±! LÃ¼tfen GG.AA.YYYY formatÄ±nda girin.")
        
        # Ã–ncelik seviyesi
        priority_options = {"1": "DÃ¼ÅŸÃ¼k", "2": "Orta", "3": "YÃ¼ksek"}
        print("Ã–ncelik seÃ§in:")
        for key, value in priority_options.items():
            print(f"{key}. {value}")
        
        while True:
            priority_choice = input("SeÃ§iminiz (1-3): ")
            if priority_choice in priority_options:
                priority = priority_options[priority_choice]
                break
            print("GeÃ§ersiz seÃ§im! LÃ¼tfen 1-3 arasÄ±nda seÃ§in.")
        
        # Yeni gÃ¶rev oluÅŸtur
        task = {
            "id": len(self.tasks) + 1,
            "title": title,
            "description": description,
            "due_date": due_date,
            "priority": priority,
            "status": "Beklemede",
            "created_at": datetime.now().strftime("%d.%m.%Y %H:%M")
        }
        
        self.tasks.append(task)
        self.save_tasks()
        print(f"'{title}' gÃ¶revi baÅŸarÄ±yla eklendi.")
    
    def list_tasks(self):
        """TÃ¼m gÃ¶revleri listeler"""
        if not self.tasks:
            print("HenÃ¼z hiÃ§ gÃ¶rev eklenmemiÅŸ.")
            return
        
        print("\n" + "="*80)
        print(f"{'ID':<4}{'BaÅŸlÄ±k':<20}{'Durum':<12}{'Ã–ncelik':<12}{'Son Tarih':<15}")
        print("-"*80)
        
        for task in self.tasks:
            print(f"{task['id']:<4}{task['title'][:19]:<20}{task['status']:<12}{task['priority']:<12}{task['due_date']:<15}")
        
        print("="*80 + "\n")
    
    def view_task(self):
        """Belirli bir gÃ¶revi ayrÄ±ntÄ±lÄ± olarak gÃ¶rÃ¼ntÃ¼ler"""
        self.list_tasks()
        if not self.tasks:
            return
            
        task_id = input("GÃ¶rÃ¼ntÃ¼lemek istediÄŸiniz gÃ¶revin ID'sini girin: ")
        try:
            task_id = int(task_id)
            task = next((t for t in self.tasks if t["id"] == task_id), None)
            
            if task:
                print("\n" + "="*50)
                print(f"ID: {task['id']}")
                print(f"BaÅŸlÄ±k: {task['title']}")
                print(f"AÃ§Ä±klama: {task['description']}")
                print(f"Durum: {task['status']}")
                print(f"Ã–ncelik: {task['priority']}")
                print(f"Son Tarih: {task['due_date']}")
                print(f"OluÅŸturulma Tarihi: {task['created_at']}")
                print("="*50 + "\n")
            else:
                print(f"ID {task_id} olan gÃ¶rev bulunamadÄ±.")
        except ValueError:
            print("GeÃ§ersiz ID! LÃ¼tfen bir sayÄ± girin.")
    
    def update_task_status(self):
        """GÃ¶rev durumunu gÃ¼nceller"""
        self.list_tasks()
        if not self.tasks:
            return
            
        task_id = input("Durumunu gÃ¼ncellemek istediÄŸiniz gÃ¶revin ID'sini girin: ")
        try:
            task_id = int(task_id)
            task = next((t for t in self.tasks if t["id"] == task_id), None)
            
            if task:
                status_options = {"1": "Beklemede", "2": "Devam Ediyor", "3": "TamamlandÄ±"}
                print("Yeni durum seÃ§in:")
                for key, value in status_options.items():
                    print(f"{key}. {value}")
                
                while True:
                    status_choice = input("SeÃ§iminiz (1-3): ")
                    if status_choice in status_options:
                        task["status"] = status_options[status_choice]
                        self.save_tasks()
                        print(f"GÃ¶rev durumu '{task['status']}' olarak gÃ¼ncellendi.")
                        break
                    print("GeÃ§ersiz seÃ§im! LÃ¼tfen 1-3 arasÄ±nda seÃ§in.")
            else:
                print(f"ID {task_id} olan gÃ¶rev bulunamadÄ±.")
        except ValueError:
            print("GeÃ§ersiz ID! LÃ¼tfen bir sayÄ± girin.")
    
    def delete_task(self):
        """GÃ¶revi siler"""
        self.list_tasks()
        if not self.tasks:
            return
            
        task_id = input("Silmek istediÄŸiniz gÃ¶revin ID'sini girin: ")
        try:
            task_id = int(task_id)
            task = next((t for t in self.tasks if t["id"] == task_id), None)
            
            if task:
                confirm = input(f"'{task['title']}' gÃ¶revini silmek istediÄŸinizden emin misiniz? (e/h): ")
                if confirm.lower() == 'e':
                    self.tasks.remove(task)
                    # ID'leri yeniden dÃ¼zenle
                    for i, t in enumerate(self.tasks):
                        t["id"] = i + 1
                    self.save_tasks()
                    print("GÃ¶rev baÅŸarÄ±yla silindi.")
                else:
                    print("Silme iÅŸlemi iptal edildi.")
            else:
                print(f"ID {task_id} olan gÃ¶rev bulunamadÄ±.")
        except ValueError:
            print("GeÃ§ersiz ID! LÃ¼tfen bir sayÄ± girin.")
    
    def search_tasks(self):
        """GÃ¶revlerde arama yapar"""
        if not self.tasks:
            print("HenÃ¼z hiÃ§ gÃ¶rev eklenmemiÅŸ.")
            return
            
        search_term = input("Arama terimi: ").lower()
        found_tasks = [t for t in self.tasks if search_term in t["title"].lower() or search_term in t["description"].lower()]
        
        if found_tasks:
            print("\n" + "="*80)
            print(f"{'ID':<4}{'BaÅŸlÄ±k':<20}{'Durum':<12}{'Ã–ncelik':<12}{'Son Tarih':<15}")
            print("-"*80)
            
            for task in found_tasks:
                print(f"{task['id']:<4}{task['title'][:19]:<20}{task['status']:<12}{task['priority']:<12}{task['due_date']:<15}")
            
            print("="*80 + "\n")
        else:
            print(f"'{search_term}' ile eÅŸleÅŸen gÃ¶rev bulunamadÄ±.")
    
    def display_menu(self):
        """Ana menÃ¼yÃ¼ gÃ¶sterir"""
        print("\nğŸ“‹ TO-DO LÄ°STESÄ° UYGULAMASI ğŸ“‹")
        print("1. GÃ¶revleri Listele")
        print("2. GÃ¶rev Ekle")
        print("3. GÃ¶rev DetaylarÄ±nÄ± GÃ¶rÃ¼ntÃ¼le")
        print("4. GÃ¶rev Durumunu GÃ¼ncelle")
        print("5. GÃ¶rev Sil")
        print("6. GÃ¶revlerde Ara")
        print("0. Ã‡Ä±kÄ±ÅŸ")
    
    def run(self):
        """UygulamayÄ± Ã§alÄ±ÅŸtÄ±rÄ±r"""
        while True:
            self.display_menu()
            choice = input("\nSeÃ§iminiz: ")
            
            if choice == "1":
                self.list_tasks()
            elif choice == "2":
                self.add_task()
            elif choice == "3":
                self.view_task()
            elif choice == "4":
                self.update_task_status()
            elif choice == "5":
                self.delete_task()
            elif choice == "6":
                self.search_tasks()
            elif choice == "0":
                print("Uygulamadan Ã§Ä±kÄ±lÄ±yor...")
                break
            else:
                print("GeÃ§ersiz seÃ§im! LÃ¼tfen tekrar deneyin.")


if __name__ == "__main__":
    app = TodoApp()
    app.run()